const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const mongoose = require('mongoose');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 4000;

// Middleware
app.use(cors()); // Allows requests from the frontend
app.use(bodyParser.json());

// MongoDB Connection
const MONGO_URI = process.env.MONGO_URI || 'mongodb+srv://kanishkasingh1920:<db_password>@cluster0.9pprp.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';
mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log('Connected to MongoDB Atlas'))
  .catch((error) => {
    console.error('Error connecting to MongoDB:', error);
    process.exit(1);
  });

// Response Schema
const responseSchema = new mongoose.Schema({
  email: { type: String, required: true },
  responses: { type: Array, required: true },
});
const Response = mongoose.model('Response', responseSchema);

// API Endpoint
app.post('/saveResponses', async (req, res) => {
  const { email, responses: userResponses } = req.body;

  if (!email || !userResponses || !userResponses.length) {
    return res.status(400).json({ error: 'Invalid data received.' });
  }

  try {
    const newResponse = new Response({ email, responses: userResponses });
    await newResponse.save();

    console.log('Saved responses:', { email, responses: userResponses });
    res.status(200).json({ message: 'Responses saved successfully!' });
  } catch (error) {
    console.error('Error saving responses:', error);
    res.status(500).json({ error: 'Failed to save responses.' });
  }
});

// Start the Server
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});

